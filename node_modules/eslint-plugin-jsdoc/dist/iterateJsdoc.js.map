{"version":3,"sources":["../src/iterateJsdoc.js"],"names":["curryUtils","functionNode","jsdoc","tagNamePreference","additionalTagNames","utils","getFunctionParameterNames","getJsdocParameterNamesDeep","getPreferredTagName","getJsdocParameterNames","name","isValidTag","hasTag","parseComment","commentNode","indent","repeat","loc","start","column","value","parsers","PARSERS","parse_tag","parse_type","str","data","includes","tag","parse_name","parse_description","iterator","context","sourceCode","getSourceCode","get","checkJsdoc","jsdocNode","getJSDocComment","report","message","fixer","fix","node","ArrowFunctionExpression","FunctionDeclaration","FunctionExpression"],"mappings":"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","file":"iterateJsdoc.js","sourcesContent":["import _ from 'lodash';\nimport commentParser from 'comment-parser';\nimport jsdocUtils from './jsdocUtils';\n\nconst curryUtils = (functionNode, jsdoc, tagNamePreference, additionalTagNames) => {\n  const utils = {};\n\n  utils.getFunctionParameterNames = () => {\n    return jsdocUtils.getFunctionParameterNames(functionNode);\n  };\n\n  utils.getJsdocParameterNamesDeep = () => {\n    return jsdocUtils.getJsdocParameterNamesDeep(jsdoc, utils.getPreferredTagName('param'));\n  };\n\n  utils.getJsdocParameterNames = () => {\n    return jsdocUtils.getJsdocParameterNames(jsdoc, utils.getPreferredTagName('param'));\n  };\n\n  utils.getPreferredTagName = (name) => {\n    return jsdocUtils.getPreferredTagName(name, tagNamePreference);\n  };\n\n  utils.isValidTag = (name) => {\n    return jsdocUtils.isValidTag(name, additionalTagNames);\n  };\n\n  utils.hasTag = (name) => {\n    return jsdocUtils.hasTag(jsdoc, name);\n  };\n\n  return utils;\n};\n\nexport const parseComment = (commentNode) => {\n  // Preserve JSDoc block start/end indentation.\n  const indent = _.repeat(' ', commentNode.loc.start.column);\n\n  return commentParser(indent + '/*' + commentNode.value + indent + '*/', {\n    // @see https://github.com/yavorskiy/comment-parser/issues/21\n    parsers: [\n      commentParser.PARSERS.parse_tag,\n      commentParser.PARSERS.parse_type,\n      (str, data) => {\n        if (_.includes(['return', 'returns'], data.tag)) {\n          return null;\n        }\n\n        return commentParser.PARSERS.parse_name(str, data);\n      },\n      commentParser.PARSERS.parse_description\n    ]\n  })[0] || {};\n};\n\nexport default (iterator) => {\n  return (context) => {\n    const sourceCode = context.getSourceCode();\n    const tagNamePreference = _.get(context, 'settings.jsdoc.tagNamePreference') || {};\n    const additionalTagNames = _.get(context, 'settings.jsdoc.additionalTagNames') || {};\n\n    const checkJsdoc = (functionNode) => {\n      const jsdocNode = sourceCode.getJSDocComment(functionNode);\n\n      if (!jsdocNode) {\n        return;\n      }\n\n      const indent = _.repeat(' ', jsdocNode.loc.start.column);\n\n      const jsdoc = parseComment(jsdocNode);\n\n      const report = (message, fixer = null) => {\n        if (fixer === null) {\n          context.report(jsdocNode, message);\n        } else {\n          context.report({\n            fix: fixer,\n            message,\n            node: jsdocNode\n          });\n        }\n      };\n\n      const utils = curryUtils(functionNode, jsdoc, tagNamePreference, additionalTagNames);\n\n      iterator({\n        context,\n        functionNode,\n        indent,\n        jsdoc,\n        jsdocNode,\n        report,\n        sourceCode,\n        utils\n      });\n    };\n\n    return {\n      ArrowFunctionExpression: checkJsdoc,\n      FunctionDeclaration: checkJsdoc,\n      FunctionExpression: checkJsdoc\n    };\n  };\n};\n"]}