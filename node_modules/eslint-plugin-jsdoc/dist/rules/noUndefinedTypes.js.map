{"version":3,"sources":["../../src/rules/noUndefinedTypes.js"],"names":["extraTypes","context","jsdoc","report","sourceCode","scopeManager","globalScope","typedefDeclarations","getAllComments","filter","comment","startsWith","value","map","flatMap","doc","tags","tag","name","definedTypes","variables","variable","concat","isModule","childScopes","forEach","parsedType","type","error","node","includes","markVariableAsUsed"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;;;AAEA,IAAMA,aAAa,CAAC,QAAD,EAAW,QAAX,EAAqB,SAArB,EAAgC,KAAhC,EAAuC,GAAvC,CAAnB;;kBAEe,4BAAa,gBAKtB;AAAA,MAJJC,OAII,QAJJA,OAII;AAAA,MAHJC,KAGI,QAHJA,KAGI;AAAA,MAFJC,MAEI,QAFJA,MAEI;AAAA,MADJC,UACI,QADJA,UACI;;AACJ,MAAMC,eAAeD,WAAWC,YAAhC;AACA,MAAMC,cAAcD,aAAaC,WAAjC;;AAEA,MAAMC,sBAAsB,sBAAEN,QAAQO,cAAR,EAAF,EACzBC,MADyB,CAClB,UAACC,OAAD,EAAa;AACnB,WAAO,iBAAEC,UAAF,CAAaD,QAAQE,KAArB,EAA4B,GAA5B,CAAP;AACD,GAHyB,EAIzBC,GAJyB,6BAKzBC,OALyB,CAKjB,UAACC,GAAD,EAAS;AAChB,WAAO,CAACA,IAAIC,IAAJ,IAAY,EAAb,EAAiBP,MAAjB,CAAwB,UAACQ,GAAD,EAAS;AACtC,aAAOA,IAAIA,GAAJ,KAAY,SAAnB;AACD,KAFM,CAAP;AAGD,GATyB,EAUzBJ,GAVyB,CAUrB,UAACI,GAAD,EAAS;AACZ,WAAOA,IAAIC,IAAX;AACD,GAZyB,EAazBN,KAbyB,EAA5B;;AAeA,MAAMO,eAAeb,YAAYc,SAAZ,CAAsBP,GAAtB,CAA0B,UAACQ,QAAD,EAAc;AAC3D,WAAOA,SAASH,IAAhB;AACD,GAFoB;;AAInB;AAJmB,GAKlBI,MALkB,CAKXjB,aAAakB,QAAb,KAA0BjB,YAAYkB,WAAZ,CAAwB,CAAxB,EAA2BJ,SAA3B,CAAqCP,GAArC,CAAyC,UAACQ,QAAD,EAAc;AACvF,WAAOA,SAASH,IAAhB;AACD,GAFiC,CAA1B,GAEH,EAPc,EAQlBI,MARkB,CAQXtB,UARW,EASlBsB,MATkB,CASXf,mBATW,CAArB;;AAWA,mBAAEkB,OAAF,CAAUvB,MAAMc,IAAhB,EAAsB,UAACC,GAAD,EAAS;AAC7B,QAAIS,mBAAJ;;AAEA,QAAI;AACFA,mBAAa,4BAAUT,IAAIU,IAAd,CAAb;AACD,KAFD,CAEE,OAAOC,KAAP,EAAc;AACd;AACA;AACD;;AAED,mCAASF,UAAT,EAAqB,UAACG,IAAD,EAAU;AAC7B,UAAIA,KAAKF,IAAL,KAAc,MAAlB,EAA0B;AACxB,YAAI,CAAC,iBAAEG,QAAF,CAAWX,YAAX,EAAyBU,KAAKX,IAA9B,CAAL,EAA0C;AACxCf,iBAAO,gBAAgB0B,KAAKX,IAArB,GAA4B,kBAAnC;AACD,SAFD,MAEO,IAAI,CAAC,iBAAEY,QAAF,CAAW9B,UAAX,EAAuB6B,KAAKX,IAA5B,CAAL,EAAwC;AAC7CjB,kBAAQ8B,kBAAR,CAA2BF,KAAKX,IAAhC;AACD;AACF;AACF,KARD;AASD,GAnBD;AAoBD,CAvDc,C","file":"noUndefinedTypes.js","sourcesContent":["import _ from 'lodash';\nimport {parse as parseType, traverse} from 'jsdoctypeparser';\nimport iterateJsdoc, {parseComment} from '../iterateJsdoc';\n\nconst extraTypes = ['string', 'number', 'boolean', 'any', '*'];\n\nexport default iterateJsdoc(({\n  context,\n  jsdoc,\n  report,\n  sourceCode\n}) => {\n  const scopeManager = sourceCode.scopeManager;\n  const globalScope = scopeManager.globalScope;\n\n  const typedefDeclarations = _(context.getAllComments())\n    .filter((comment) => {\n      return _.startsWith(comment.value, '*');\n    })\n    .map(parseComment)\n    .flatMap((doc) => {\n      return (doc.tags || []).filter((tag) => {\n        return tag.tag === 'typedef';\n      });\n    })\n    .map((tag) => {\n      return tag.name;\n    })\n    .value();\n\n  const definedTypes = globalScope.variables.map((variable) => {\n    return variable.name;\n  })\n\n    // If the file is a module, concat the variables from the module scope.\n    .concat(scopeManager.isModule() ? globalScope.childScopes[0].variables.map((variable) => {\n      return variable.name;\n    }) : [])\n    .concat(extraTypes)\n    .concat(typedefDeclarations);\n\n  _.forEach(jsdoc.tags, (tag) => {\n    let parsedType;\n\n    try {\n      parsedType = parseType(tag.type);\n    } catch (error) {\n      // On syntax error, will be handled by valid-types.\n      return;\n    }\n\n    traverse(parsedType, (node) => {\n      if (node.type === 'NAME') {\n        if (!_.includes(definedTypes, node.name)) {\n          report('The type \\'' + node.name + '\\' is undefined.');\n        } else if (!_.includes(extraTypes, node.name)) {\n          context.markVariableAsUsed(node.name);\n        }\n      }\n    });\n  });\n});\n"]}