{"version":3,"sources":["../../src/rules/requireDescriptionCompleteSentence.js"],"names":["extractParagraphs","text","split","extractSentences","replace","filter","sentence","test","map","isNewLinePrecededByAPeriod","lastLineEndsSentence","lines","some","line","isBoolean","isCapitalized","str","toUpperCase","capitalize","charAt","slice","validateDescription","description","report","jsdocNode","sourceCode","tag","paragraphs","paragraph","sentences","fix","fixer","getText","last","RegExp","escapeRegExp","beginning","reg","$0","$1","sentence_","replaceText","jsdoc","tags","includes","trimStart"],"mappings":"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","file":"requireDescriptionCompleteSentence.js","sourcesContent":["import _ from 'lodash';\nimport iterateJsdoc from '../iterateJsdoc';\n\nconst extractParagraphs = (text) => {\n  return text.split(/\\n\\n/);\n};\n\nconst extractSentences = (text) => {\n  return text\n\n    // Remove all {} tags.\n    .replace(/\\{[\\s\\S]*?\\}\\s*/g, '')\n    .split(/[.?!:](?:\\s+|$)/)\n\n    // Ignore sentences with only whitespaces.\n    .filter((sentence) => {\n      return !/^\\s*$/.test(sentence);\n    })\n\n    // Re-add the dot.\n    .map((sentence) => {\n      return sentence + '.';\n    });\n};\n\nconst isNewLinePrecededByAPeriod = (text) => {\n  let lastLineEndsSentence;\n\n  const lines = text.split('\\n');\n\n  return !_.some(lines, (line) => {\n    if (_.isBoolean(lastLineEndsSentence) && !lastLineEndsSentence && /^[A-Z]/.test(line)) {\n      return true;\n    }\n\n    lastLineEndsSentence = /[.:?!]$/.test(line);\n\n    return false;\n  });\n};\n\nconst isCapitalized = (str) => {\n  return str[0] === str[0].toUpperCase();\n};\n\nconst capitalize = (str) => {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\n\nconst validateDescription = (description, report, jsdocNode, sourceCode, tag) => {\n  if (!description) {\n    return false;\n  }\n\n  const paragraphs = extractParagraphs(description);\n\n  return _.some(paragraphs, (paragraph) => {\n    const sentences = extractSentences(paragraph);\n\n    const fix = (fixer) => {\n      let text = sourceCode.getText(jsdocNode);\n\n      if (!/[.:?!]$/.test(paragraph)) {\n        const line = _.last(paragraph.split('\\n'));\n\n        text = text.replace(new RegExp(_.escapeRegExp(line) + '$', 'm'), line + '.');\n      }\n\n      for (const sentence of sentences.filter((sentence_) => {\n        return !isCapitalized(sentence_);\n      })) {\n        const beginning = sentence.split('\\n')[0];\n\n        if (tag) {\n          const reg = new RegExp('(@' + _.escapeRegExp(tag) + '.*)' + _.escapeRegExp(beginning));\n\n          text = text.replace(reg, ($0, $1) => {\n            return $1 + capitalize(beginning);\n          });\n        } else {\n          text = text.replace(beginning, capitalize(beginning));\n        }\n      }\n\n      return fixer.replaceText(jsdocNode, text);\n    };\n\n    if (_.some(sentences, (sentence) => {\n      return !isCapitalized(sentence);\n    })) {\n      report('Sentence should start with an uppercase character.', fix);\n    }\n\n    if (!/[.!?]$/.test(paragraph)) {\n      report('Sentence must end with a period.', fix);\n\n      return true;\n    }\n\n    if (!isNewLinePrecededByAPeriod(paragraph)) {\n      report('A line of text is started with an uppercase character, but preceding line does not end the sentence.');\n\n      return true;\n    }\n\n    return false;\n  });\n};\n\nexport default iterateJsdoc(({\n  sourceCode,\n  jsdoc,\n  report,\n  jsdocNode\n}) => {\n  if (validateDescription(jsdoc.description, report, jsdocNode, sourceCode)) {\n    return;\n  }\n\n  const tags = _.filter(jsdoc.tags, (tag) => {\n    return _.includes(['param', 'arg', 'argument', 'returns', 'return'], tag.tag);\n  });\n\n  _.some(tags, (tag) => {\n    const description = _.trimStart(tag.description, '- ');\n\n    return validateDescription(description, report, jsdocNode, sourceCode, tag.tag);\n  });\n});\n"]}